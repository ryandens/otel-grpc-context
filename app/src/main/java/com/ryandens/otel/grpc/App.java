/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ryandens.otel.grpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.stub.StreamObserver;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import org.hypertrace.copy.example.Copyhelloworld.CopyRequest;
import org.hypertrace.copy.example.Copyhelloworld.CopyResponse;
import org.hypertrace.copy.example.GreeterCopyGrpc;
import org.hypertrace.copy.example.GreeterCopyGrpc.GreeterCopyBlockingStub;
import org.hypertrace.example.GreeterGrpc.GreeterImplBase;
import org.hypertrace.example.Helloworld;
import org.hypertrace.example.Helloworld.Response;

public class App {
  private static final ExecutorService executor = Executors.newFixedThreadPool(1);

  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) throws IOException, InterruptedException {
    String hostName = System.getenv("APPCOPY_HOSTNAME");
    ManagedChannel managedChannel =
        ManagedChannelBuilder.forAddress(hostName != null ? hostName : "localhost", 8081)
            .usePlaintext()
            .build();
    GreeterCopyBlockingStub greeterCopyBlockingStub =
        GreeterCopyGrpc.newBlockingStub(managedChannel);
    int serverPort = 8080;
    Server server =
        ServerBuilder.forPort(serverPort)
            .addService(
                new GreeterImplBase() {
                  @Override
                  public void sayHello(
                      Helloworld.Request request,
                      StreamObserver<Helloworld.Response> responseObserver) {
                    String message = "Hello " + request.getName();
                    Response build = Response.newBuilder().setMessage(message).build();
                    responseObserver.onNext(build);
                    responseObserver.onCompleted();
                    receiveGreeting(request.getName());
                  }

                  public void receiveGreeting(String name) {
                    executor.execute(
                        () -> {
                          CopyResponse copyResponse =
                              greeterCopyBlockingStub.sayHelloCopy(
                                  CopyRequest.newBuilder().setName("fake").build());
                          System.out.println(copyResponse.getMessage());
                        });
                  }
                })
            .build();
    server.start();
    System.out.println("server started on port " + serverPort);
    server.awaitTermination();
  }
}
